<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var types = new[]
    {
        typeof(sbyte),
        typeof(Int16),
        typeof(Int32),
        typeof(Int64),
        typeof(byte), 
        typeof(UInt16),
        typeof(UInt32),
        typeof(UInt64),
        typeof(Single),
        typeof(Double),
        typeof(bool), 
        typeof(char), 
        typeof(decimal), 
        
        typeof(DateTime), 
        typeof(DateTimeOffset), 
        typeof(TimeSpan), 
    };
#>
using System;
using HyperMapper;
using System.Globalization;

namespace HyperMapper.Mappers
{
<# foreach(var t in types) {  #>
    public sealed class <#= t.Name #>ParseMapper : IObjectMapper<string, <#= t.Name #>>
    {
        public <#= t.Name #> Map(string from, IObjectMapperResolver resolver)
        {
            return <#= t.Name #>.Parse(from);
        }
    }

<# } #>

<# foreach(var t in types) {  #>
    public sealed class Nullable<#= t.Name #>ParseMapper : IObjectMapper<string, <#= t.Name #>?>
    {
        public <#= t.Name #>? Map(string from, IObjectMapperResolver resolver)
        {
            return <#= t.Name #>.TryParse(from, out var value)
                ? value
                : default(<#= t.Name #>?);
        }
    }

<# } #>
}